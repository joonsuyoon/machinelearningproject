# -*- coding: utf-8 -*-
"""후보지 선정 필터링.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z5iX0N9xi0NuBUUeEDHMA2_E4dBujIrU

공간 근접 필터링 (Spatial Proximity Filtering)
"""

!pip install geopy

"""1차 필터링(기존 쓰레기통 위치에서 100m 이내 후보지 제거)"""

import pandas as pd
from geopy.distance import geodesic

# 파일 업로드
from google.colab import files
uploaded = files.upload()

df_existing = pd.read_csv("선정 행정동 쓰레기통 위치.csv")

# 위도/경도 컬럼이 문자열일 경우 float로 변환
df_existing['위도'] = df_existing['위도'].astype(float)
df_existing['경도'] = df_existing['경도'].astype(float)

# 좌표 리스트 생성: (위도, 경도) 튜플
existing_coords = list(zip(df_existing['위도'], df_existing['경도']))

df_candidate1 = pd.read_csv("후보지(버스정류장).csv")

# 위도/경도 컬럼 float 변환
df_candidate1['위도'] = df_candidate1['위도'].astype(float)
df_candidate1['경도'] = df_candidate1['경도'].astype(float)

DISTANCE_THRESHOLD = 100 # 기준 거리: 100m

filtered_candidates = []

for _, cand in df_candidate1.iterrows():
    cand_pos = (cand['위도'], cand['경도'])
    is_close = False

    for exist_pos in existing_coords:
        distance = geodesic(cand_pos, exist_pos).meters
        if distance < DISTANCE_THRESHOLD:
            is_close = True
            break

    if not is_close:
        filtered_candidates.append(cand)

df_filtered = pd.DataFrame(filtered_candidates)

# 상위 5개 확인
df_filtered.head()

# 필요시 저장
df_filtered.to_csv("후보지_필터링(버스정류장)_100.csv", index=False)

df_candidate2 = pd.read_csv("후보지(횡단보도).csv")

# 위도/경도 컬럼 float 변환
df_candidate2['위도'] = df_candidate2['위도'].astype(float)
df_candidate2['경도'] = df_candidate2['경도'].astype(float)

DISTANCE_THRESHOLD = 100 # 기준 거리: 100m

filtered_candidates = []

for _, cand in df_candidate2.iterrows():
    cand_pos = (cand['위도'], cand['경도'])
    is_close = False

    for exist_pos in existing_coords:
        distance = geodesic(cand_pos, exist_pos).meters
        if distance < DISTANCE_THRESHOLD:
            is_close = True
            break

    if not is_close:
        filtered_candidates.append(cand)

df_filtered = pd.DataFrame(filtered_candidates)

# 상위 5개 확인
df_filtered.head()

# 필요시 저장
df_filtered.to_csv("후보지_필터링(횡단보도)_100.csv", index=False)

"""2차 필터링(1차 필터링을 거친 후보지들간 100m 이내 후보지 제거)"""

bus_df = pd.read_csv("후보지_필터링(버스정류장)_100.csv")
cross_df = pd.read_csv("후보지_필터링(횡단보도)_100.csv")

# 초기 통합 후보지: 버스 기반 먼저 추가
final_candidates = []

# 기준 반경 (100m)
radius_m = 100

# 버스 정류장 후보지 먼저 모두 추가
for _, row in bus_df.iterrows():
    final_candidates.append((row["위도"], row["경도"], "bus"))

# 횡단보도 후보지 중에서 버스 후보지 반경 100m 이내 중복 제거
for _, row in cross_df.iterrows():
    point = (row["위도"], row["경도"])
    too_close = False
    for f_lat, f_lng, _ in final_candidates:
        dist = geodesic(point, (f_lat, f_lng)).meters
        if dist <= radius_m:
            too_close = True
            break
    if not too_close:
        final_candidates.append((row["위도"], row["경도"], "cross"))

# 결과 저장
result_df = pd.DataFrame(final_candidates, columns=["위도", "경도", "분류"])
result_df.to_csv("통합후보지(100m).csv", index=False)

# 다운로드
files.download("통합후보지(100m).csv")